filteredCollection = collection.select('ndvi') \
  .filter(ee.Filter.bounds(testPoint.geometry()))

def func_xvr(image):
  stats = image.reduceRegion({
    'reducer': ee.Reducer.mean(),
    'geometry': testPoint.geometry(),
    'scale': 10,
    'maxPixels': 1e10
  })
  # reduceRegion doesn't return any output if the image doesn't intersect
  # with the point or if the image is masked out due to cloud
  # If there was no ndvi value found, we set the ndvi to a NoData value -9999
  ndvi = ee.List([stats.get('ndvi'), -9999]) \
    .reduce(ee.Reducer.firstNonNull())

  # Create a feature with None geometry and NDVI value and date as properties
  f = ee.Feature(None, {'ndvi': ndvi,
    'date': ee.Date(image.get('system:time_start')).format('YYYY-MM-dd')})
  return f

timeSeries = ee.FeatureCollection(filteredCollection.map(func_xvr
))

))

# Check the results
print(timeSeries.first())

# # Export to CSV
# Export.table.toDrive({
#     'collection': timeSeries,
#     'description': 'Single_Location_NDVI_time_series',
#     'folder': 'earthengine',
#     'fileNamePrefix': 'ndvi_time_series_single',
#     'fileFormat': 'CSV'
# })
